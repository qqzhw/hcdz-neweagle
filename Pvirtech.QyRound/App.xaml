<Application x:Class="Pvirtech.QyRound.App" 
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
			 xmlns:controls="http://metro.pvirtech.com/winfx/xaml/controls"
             xmlns:metro="http://metro.pvirtech.com/winfx/xaml/controls">
	<Application.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="pack://application:,,,/Pvirtech.Metro;component/Styles/Controls.xaml" />
				<ResourceDictionary Source="pack://application:,,,/Pvirtech.Metro;component/Styles/Fonts.xaml" />
				<ResourceDictionary Source="pack://application:,,,/Pvirtech.Metro;component/Styles/Colors.xaml" />
				<ResourceDictionary Source="pack://application:,,,/Pvirtech.Metro;component/Styles/Accents/Blue.xaml" />
				<ResourceDictionary Source="pack://application:,,,/Pvirtech.Metro;component/Styles/Accents/BaseLight.xaml" />
				<ResourceDictionary Source="pack://application:,,,/Pvirtech.QyRound;component/Styles/DataTemplates.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<DataTemplate x:Key="PvirtechWindowTitle">
				<TextBlock  FontSize="20" FontFamily="SimHei" TextOptions.TextFormattingMode="Display" FontWeight="ExtraBold" Margin="5,0,0,0" VerticalAlignment="Center" Text="{Binding}" />
			</DataTemplate>
			<Style x:Key="DescriptionHeaderStyle" TargetType="Label">
				<Setter Property="FontSize" Value="22" />
				<Setter Property="HorizontalAlignment" Value="Center" />
			</Style>

			<Style BasedOn="{StaticResource MetroValidationPopup}" TargetType="{x:Type controls:CustomValidationPopup}">
				<Setter Property="CloseOnMouseLeftButtonDown" Value="False" />
			</Style>

			<!--  quick change of the collapse storyboard duration  -->
			<Storyboard x:Key="MetroExpanderCollapseStoryboard">
				<DoubleAnimation Duration="0:0:0.1"
                                 Storyboard.TargetName="ExpandSite"
                                 Storyboard.TargetProperty="(UIElement.Opacity)"
                                 To="0" />
				<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Visibility)">
					<DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Collapsed}" />
				</ObjectAnimationUsingKeyFrames>
			</Storyboard>

			<Style x:Key="metroTabItemStyle" TargetType="{x:Type metro:MetroTabItem}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type metro:MetroTabItem}">
							<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
								<StackPanel HorizontalAlignment="Stretch" Orientation="Vertical">
									<StackPanel x:Name="SpContentSite" Orientation="Horizontal">
										<ContentPresenter x:Name="ContentSite"   ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" TextElement.Foreground="{TemplateBinding Foreground}" TextElement.FontWeight="{TemplateBinding metro:ControlsHelper.HeaderFontWeight}" TextElement.FontStretch="{TemplateBinding metro:ControlsHelper.HeaderFontStretch}" TextElement.FontSize="{TemplateBinding metro:ControlsHelper.HeaderFontSize}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="2,1" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
										<Button x:Name="PART_CloseButton" Background="{DynamicResource GrayNormalBrush}" CommandParameter="{TemplateBinding CloseTabCommandParameter}" Command="{TemplateBinding CloseTabCommand}" HorizontalAlignment="Right" Height="{Binding Width, Mode=OneWay, RelativeSource={RelativeSource Self}}" IsTabStop="False" Margin="0,0,2,0" Style="{DynamicResource ChromelessButtonStyle}" VerticalAlignment="Top">
											<Button.Resources>
												<Canvas x:Key="tabitem_close" Clip="F1M0,0L76,0 76,76 0,76 0,0" Height="76" Width="76">
													<Path Data="F1M26.9166,22.1667L37.9999,33.25 49.0832,22.1668 53.8332,26.9168 42.7499,38 53.8332,49.0834 49.0833,53.8334 37.9999,42.75 26.9166,53.8334 22.1666,49.0833 33.25,38 22.1667,26.9167 26.9166,22.1667z" Fill="{DynamicResource BlackBrush}" Height="31.6667" Canvas.Left="22.1666" Stretch="Fill" Canvas.Top="22.1667" Width="31.6666"/>
												</Canvas>
											</Button.Resources>
											<Button.OpacityMask>
												<VisualBrush Stretch="Uniform">
													<VisualBrush.Visual>
														<Canvas Clip="F1M0,0L76,0 76,76 0,76 0,0" Height="76" Width="76">
															<Path Data="F1M26.9166,22.1667L37.9999,33.25 49.0832,22.1668 53.8332,26.9168 42.7499,38 53.8332,49.0834 49.0833,53.8334 37.9999,42.75 26.9166,53.8334 22.1666,49.0833 33.25,38 22.1667,26.9167 26.9166,22.1667z" Fill="{DynamicResource BlackBrush}" Height="31.6667" Canvas.Left="22.1666" Stretch="Fill" Canvas.Top="22.1667" Width="31.6666"/>
														</Canvas>
													</VisualBrush.Visual>
												</VisualBrush>
											</Button.OpacityMask>
											<!--<Button.Width>
                                        <TemplateBinding Property="metro:ControlsHelper.HeaderFontSize">
                                            <TemplateBinding.Converter>
                                                <Custom:MetroTabItemCloseButtonWidthConverter/>
                                            </TemplateBinding.Converter>
                                        </TemplateBinding>
                                    </Button.Width>-->
										</Button>
									</StackPanel>
									<Rectangle x:Name="Underline" HorizontalAlignment="Stretch" Height="2" Margin="0,1,0,0">
										<Rectangle.Visibility>
											<Binding Path="(metro:TabControlHelper.IsUnderlined)" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}">
												<Binding.Converter>
													<BooleanToVisibilityConverter/>
												</Binding.Converter>
											</Binding>
										</Rectangle.Visibility>
									</Rectangle>
								</StackPanel>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsSelected" Value="True">
									<Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="{DynamicResource AccentColorBrush}"/>
									<Setter Property="Background" TargetName="SpContentSite" Value="#E100BFFF"/>
									<Setter Property="Fill" TargetName="Underline" Value="{DynamicResource AccentColorBrush}"/>
								</Trigger>
								<Trigger Property="IsSelected" Value="False">
									<Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="Black"/>
									<Setter Property="Fill" TargetName="Underline" Value="{DynamicResource GrayNormalBrush}"/>
								</Trigger>
								<Trigger Property="IsMouseOver" SourceName="ContentSite" Value="True">
									<Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="{DynamicResource GrayHoverBrush}"/>
									<Setter Property="Fill" TargetName="Underline" Value="{DynamicResource GrayHoverBrush}"/>
									<Setter Property="Background" TargetName="PART_CloseButton" Value="{DynamicResource GrayHoverBrush}"/>
								</Trigger>
								<Trigger Property="IsMouseOver" SourceName="PART_CloseButton" Value="True">
									<Setter Property="Background" TargetName="PART_CloseButton" Value="{DynamicResource AccentColorBrush}"/>
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" SourceName="ContentSite" Value="True"/>
										<Condition Property="IsSelected" Value="True"/>
									</MultiTrigger.Conditions>
									<Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="{DynamicResource HighlightBrush}"/>
									<Setter Property="Fill" TargetName="Underline" Value="{DynamicResource HighlightBrush}"/>
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="HeaderTemplate">
					<Setter.Value>
						<DataTemplate>
							<TextBlock Text="{TemplateBinding Content}"   TextWrapping="Wrap"  Width="20"/>
						</DataTemplate>
					</Setter.Value>
				</Setter>
				<Style.BasedOn>
					<Style TargetType="{x:Type TabItem}">
						<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
						<Setter Property="IsTabStop" Value="False"/>
						<Setter Property="Padding" Value="6,2"/>
						<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
						<Setter Property="VerticalContentAlignment" Value="Stretch"/>
						<Setter Property="MinWidth" Value="5"/>
						<Setter Property="MinHeight" Value="5"/>
						<Setter Property="BorderThickness" Value="0"/>
						<Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
						<Setter Property="Background" Value="Transparent"/>
						<Setter Property="Foreground" Value="{DynamicResource BlackBrush}"/>
						<Setter Property="SnapsToDevicePixels" Value="True"/>
						<Setter Property="metro:ControlsHelper.HeaderFontSize" Value="16"/>
						<Setter Property="Header" Value="{Binding Content.DataContext.HeaderInfo, RelativeSource={RelativeSource Self}}" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type TabItem}">
									<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
										<DockPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
											<DockPanel.Resources>
												<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
											</DockPanel.Resources>
											<ContentPresenter x:Name="ContentSite"   ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" DockPanel.Dock="Top" TextElement.Foreground="{TemplateBinding Foreground}" TextElement.FontWeight="{TemplateBinding metro:ControlsHelper.HeaderFontWeight}" TextElement.FontStretch="{TemplateBinding metro:ControlsHelper.HeaderFontStretch}" TextElement.FontSize="{TemplateBinding metro:ControlsHelper.HeaderFontSize}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
											<Rectangle x:Name="Underline" DockPanel.Dock="Bottom" HorizontalAlignment="Stretch" Height="2" Margin="0,1,0,0">
												<Rectangle.Visibility>
													<Binding Path="(metro:TabControlHelper.IsUnderlined)" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}">
														<Binding.Converter>
															<BooleanToVisibilityConverter/>
														</Binding.Converter>
													</Binding>
												</Rectangle.Visibility>
											</Rectangle>
										</DockPanel>
									</Border>
									<ControlTemplate.Triggers>
										<Trigger Property="TabStripPlacement" Value="Left">
											<Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Left"/>
											<Setter Property="DockPanel.Dock" TargetName="Underline" Value="Right"/>
											<Setter Property="Width" TargetName="Underline" Value="2"/>
											<Setter Property="Height" TargetName="Underline" Value="Auto"/>
											<Setter Property="Margin" TargetName="Underline" Value="1,0,0,0"/>
										</Trigger>
										<Trigger Property="TabStripPlacement" Value="Top">
											<Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Top"/>
											<Setter Property="DockPanel.Dock" TargetName="Underline" Value="Bottom"/>
											<Setter Property="DockPanel.Dock" TargetName="Underline" Value="Right"/>
											<Setter Property="Height" TargetName="Underline" Value="2"/>
											<Setter Property="Width" TargetName="Underline" Value="Auto"/>
											<Setter Property="Margin" TargetName="Underline" Value="0,1,0,0"/>
										</Trigger>
										<Trigger Property="TabStripPlacement" Value="Right">
											<Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Right"/>
											<Setter Property="DockPanel.Dock" TargetName="Underline" Value="Left"/>
											<Setter Property="Width" TargetName="Underline" Value="2"/>
											<Setter Property="Height" TargetName="Underline" Value="Auto"/>
											<Setter Property="Margin" TargetName="Underline" Value="0,0,1,0"/>
										</Trigger>
										<Trigger Property="TabStripPlacement" Value="Bottom">
											<Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Bottom"/>
											<Setter Property="DockPanel.Dock" TargetName="Underline" Value="Top"/>
											<Setter Property="Height" TargetName="Underline" Value="2"/>
											<Setter Property="Width" TargetName="Underline" Value="Auto"/>
											<Setter Property="Margin" TargetName="Underline" Value="0,0,0,1"/>
										</Trigger>
										<Trigger Property="IsSelected" Value="True">
											<Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="White"/>
											<Setter Property="Fill" TargetName="Underline" Value="{DynamicResource AccentColorBrush}"/>
										</Trigger>
										<Trigger Property="IsSelected" Value="False">
											<Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="Black"/>
											<Setter Property="Fill" TargetName="Underline" Value="{DynamicResource GrayNormalBrush}"/>
										</Trigger>
										<Trigger Property="IsMouseOver" SourceName="ContentSite" Value="True">
											<Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="{DynamicResource GrayHoverBrush}"/>
											<Setter Property="Fill" TargetName="Underline" Value="{DynamicResource GrayHoverBrush}"/>
										</Trigger>
										<MultiTrigger>
											<MultiTrigger.Conditions>
												<Condition Property="IsMouseOver" SourceName="ContentSite" Value="True"/>
												<Condition Property="IsSelected" Value="True"/>
											</MultiTrigger.Conditions>
											<Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="{DynamicResource HighlightBrush}"/>
											<Setter Property="Fill" TargetName="Underline" Value="{DynamicResource HighlightBrush}"/>
										</MultiTrigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
				</Style.BasedOn>
			</Style>

		</ResourceDictionary>
	</Application.Resources>
</Application>
